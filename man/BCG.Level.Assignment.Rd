% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BCG.Level.Assignment.R
\name{BCG.Level.Assignment}
\alias{BCG.Level.Assignment}
\title{BCG Level Assignment}
\usage{
BCG.Level.Assignment(df.level.membership)
}
\arguments{
\item{df.level.membership}{Wide data frame with level memberships (0-1).  L1 to L6.}
}
\value{
Returns a data frame of results in the wide format.
}
\description{
Biological Condition Gradient level assignment (1st and 2nd) given Level memberships.
}
\details{
Input is L1 to L6 with membership values of 0 to 1.  
Result is 1st (primary) Level (Lev.1.Name) and 2nd (secondary) Level (Lev.2.Name).  
Also give close (Lev.Memb.close) and a proportional Level assignment ("Lev.Prop").

Add QC Checks.
}
\examples{

# construct a dummy dataset
L1 <- c(rep(0, 10), 0, 0)
L2 <- c(0.4, 0, 0.4, rep(0,7), 0, 0)
L3 <- c(0.6, 0, 0.6, 0, 0.42, 0, 1, 1, 0.22, 0.33, 0.5, 0)
L4 <- c(0, 0.9, 0, 0, 0.58, 0.05, 0, 0, 0.78, 0.67, 0.5, 0)
L5 <- c(0, 0.1, 0, 1, 0, 0.95, rep(0,4), 0, 1)
L6 <- c(rep(0, 10), 0, 0)
SampleID <- LETTERS[1:length(L1)]
df.Level.Membership <- as.data.frame(SampleID, stringsAsFactors=FALSE)
df.Level.Membership[,"L1"] <- L1
df.Level.Membership[,"L2"] <- L2
df.Level.Membership[,"L3"] <- L3
df.Level.Membership[,"L4"] <- L4
df.Level.Membership[,"L5"] <- L5
df.Level.Membership[,"L6"] <- L6

# Run Function
df.Levels <- BCG.Level.Assignment(df.Level.Membership)

\dontrun{
# Show Results
View(df.Levels)

# Save Results
write.table(df.Levels, "Levels.tsv"
            , row.names=FALSE, col.names=TRUE, sep="\\t")
}

#~~~~~~~~~~~~~~~~~~~~~~~

# Example Data

library(readxl)
library(reshape2) 
library(BioMonTools)

# Calculate Metrics
df.samps.bugs <- read_excel(system.file("./extdata/Data_BCG_PacNW.xlsx"
                                        , package="BCGcalc")
                           , guess_max = 10^6)
                                        
# Run Function
myDF <- df.samps.bugs
myCols <- c("Area_mi2", "SurfaceArea", "Density_m2", "Density_ft2", "Site_Type")
df.metric.values.bugs <- metric.values(myDF, "bugs", fun.cols2keep=myCols) 

# Import Rules
df.rules <- read_excel(system.file("./extdata/Rules.xlsx"
                             , package="BCGcalc"), sheet="BCG_PacNW_v1_500ct") 

# Calculate Metric Memberships
df.Metric.Membership <- BCG.Metric.Membership(df.metric.values.bugs, df.rules)

# Calculate Level Memberships
df.Level.Membership <- BCG.Level.Membership(df.Metric.Membership, df.rules)

# Run Function
df.Levels <- BCG.Level.Assignment(df.Level.Membership)

# QC Checks (flags)
#
# Import Checks
df.checks <- read_excel(system.file("./extdata/MetricFlags.xlsx"
                                          , package="BCGcalc"), sheet="Flags") 

# Run Function
df.flags <- qc.checks(df.metric.values.bugs, df.checks)
# Change terminology; PASS/FAIL to NA/flag
df.flags[,"FLAG"][df.flags[,"FLAG"]=="FAIL"] <- "flag"
df.flags[, "FLAG"][df.flags[,"FLAG"]=="PASS"] <- NA

# long to wide format
df.flags.wide <- dcast(df.flags, SAMPLEID ~ CHECKNAME, value.var="FLAG")
# Calc number of "flag"s by row.
df.flags.wide$NumFlags <- rowSums(df.flags.wide=="flag", na.rm=TRUE)
# Rearrange columns
NumCols <- ncol(df.flags.wide)
df.flags.wide <- df.flags.wide[, c(1, NumCols, 2:(NumCols-1))]

# Merge Levels and Flags
df.Levels.Flags <- merge(df.Levels, df.flags.wide, by="SAMPLEID", all.x=TRUE)
             
# Summarize Results
table(df.flags[,"CHECKNAME"], df.flags[,"FLAG"], useNA="ifany")

\dontrun{
# Show Results
View(df.Levels.Flags)

# Save Results
write.csv(df.Levels.Flags, "Levels.Flags.csv")
}
}
